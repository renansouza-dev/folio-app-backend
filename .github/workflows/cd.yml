name: Java CD with Docker Image

on:
  push:
    branches:
      - main

jobs:
  build-and-push:
    name: Build Docker Image
    runs-on: ubuntu-latest

    outputs:
      version: ${{ steps.release.outputs.version }}

    steps:
      - uses: actions/checkout@v4.1.1

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven

      - name: Build with Maven
        run: mvn -B package --file pom.xml -ntp

      - name: Get Maven Version
        run: |
          snapshot=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          echo "snapshot=${snapshot}" >> $GITHUB_ENV

      - name: Extract and Display Version
        id: release
        run: |
          version=$(echo $snapshot | grep -oE '[0-9]+\.[0-9]+\.[0-9]+')
          echo "version=$(echo $snapshot | grep -oE '[0-9]+\.[0-9]+\.[0-9]+')" >> $GITHUB_OUTPUT
          echo "Using Release Version: $version"
        
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5.1.0
        with:
          context: .
          push: true
          file: ./Dockerfile
          tags: |
            ghcr.io/${{ github.repository }}:latest
            ghcr.io/${{ github.repository }}:$version

  deploy:
    needs: build-and-push
    name: Deploy to EC2
    runs-on: ubuntu-latest
    environment: development

    steps:
      - env:
          RELEASE_VERSION: ${{needs.job1.outputs.version}}
        run: echo "Deploying using version ${{ github.repository }}:$RELEASE_VERSION"

      - name: Print the version
        run: |
          echo "Building Image for version: ${{ needs.job1.outputs.version }}"

      - uses: actions/checkout@v4.1.1
        if: ${{ needs.job1.outputs.version != null }}

      - name: Configure AWS credentials
        if: ${{ needs.job1.outputs.version != null }}
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Download task definition
        if: ${{ needs.job1.outputs.version != null }}
        run: |
          aws ecs describe-task-definition --task-definition ${{ vars.MY_ECS_TASK_DEFINITION }} \
          --query taskDefinition > task-definition.json

      - name: Fill in the new image ID in the Amazon ECS task definition
        if: ${{ needs.job1.outputs.version != null }}
        uses: aws-actions/amazon-ecs-render-task-definition@v1.2.0
        with:
          task-definition: task-definition.json
          container-name: folio-app-backend
          image: ghcr.io/${{ github.repository }}:$RELEASE_VERSION

      - name: Run Task on Amazon ECS
        if: ${{ needs.job1.outputs.version != null }}
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: task-definition.json
          cluster: ${{ vars.MY_ECS_CLUSTER }}
          service: ${{ vars.MY_ECS_SERVICE }}
          count: 1
          started-by: github-actions-${{ github.actor }}
          wait-for-service-stability: true
